package cool.b166er;import java.util.Arrays;import java.util.Vector;/** * Created by Luke Parsons on 14/12/2015. */public class Group {  private boolean Complete;  private puzzle myPuzzle;  private Vector<Square> mySquares;  private Vector<Integer> valuesLockedIn;  private Vector<Integer> ValuesToGet;  public Group(puzzle myPuzzle) {    this.myPuzzle = myPuzzle;    this.mySquares = new Vector<>();    this.valuesLockedIn = new Vector<>();    Integer[] VTG = new Integer[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9 };    this.ValuesToGet = new Vector<>();    ValuesToGet.addAll(Arrays.asList(VTG));  }  public Vector<Integer> getValuesToGet() {    return ValuesToGet;  }  public Vector<Square> getMySquares() {    return mySquares;  }  public Vector<Integer> getValuesLockedIn() {    return valuesLockedIn;  }  public void LockedInValue(Square S) {    this.valuesLockedIn.add(S.getValue());    if (this.ValuesToGet.contains(S.getValue())) {      this.ValuesToGet.remove(ValuesToGet.indexOf(S.getValue()));    }    if (this.valuesLockedIn.size() == 9 && this.ValuesToGet.size() == 0) {      this.Complete = true;      this.myPuzzle.LockInGroup(this);    } else {      this.updateSquares();    }  }  public void updateSquares() {    for (Square s : mySquares) {      s.update(this);    }  }  public void register(Square s) {    this.mySquares.add(s);    if (s.islockedIn()) {      valuesLockedIn.add(s.getValue());      ValuesToGet.remove(ValuesToGet.indexOf(s.getValue()));    }  }}